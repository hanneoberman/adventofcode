{
  "hash": "0ced99d62647a72776a80d7ddc09d66d",
  "result": {
    "markdown": "---\ntitle: \"2023: Day 1\"\ndate: 2023-12-1\ncategories:\n  - TAG_1\n  - TAG_2\ndraft: false\n---\n\n\n## Setup\n\n[The original challenge](https://adventofcode.com/2023/day/1)\n\n[My data](input){target=\"_blank\"}\n\n## Part 1\n\n\n::: {.cell}\n\n:::\n\n\nLoad the necessary packages and input.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(aochelpers)\nlibrary(stringr)\nlibrary(purrr)\n# other options: aoc_input_data_frame(), aoc_input_matrix()\ninput <- aoc_input_vector(1, 2023)\nhead(input)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"qzjggk1one\"                        \"two2seven7\"                       \n[3] \"vszthreetwo6threethree4two3\"       \"zcsvvlslqvfive11chhzmdjdgz8vbgldl\"\n[5] \"jjsmsksvbr77cfdrdseven1zd\"         \"947lkkgznlhxseventwo\"             \n```\n:::\n:::\n\n\nExtract numeric elements only. See https://stringr.tidyverse.org/ for `stringr` functions and cheat sheet.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_numbers <- str_remove_all(input, regex(\"[:alpha:]\"))\n```\n:::\n\n\nInspect results.\n\n::: {.cell}\n\n```{.r .cell-code}\ninput[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"qzjggk1one\"                  \"two2seven7\"                 \n[3] \"vszthreetwo6threethree4two3\"\n```\n:::\n\n```{.r .cell-code}\ndat_numbers[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"   \"27\"  \"643\"\n```\n:::\n:::\n\n\nNow drop the middle values by extracting the first and last number.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_first <- str_extract_all(dat_numbers, regex(\"^[:digit:]\"), simplify = TRUE)\ndat_last <- str_extract_all(dat_numbers, regex(\"[:digit:]$\"), simplify = TRUE)\n```\n:::\n\n\nInspect results.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_first[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"6\"\n```\n:::\n\n```{.r .cell-code}\ndat_last[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"7\" \"3\"\n```\n:::\n:::\n\n\nNow concatenate the first and last value.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_values <- str_c(dat_first, dat_last)\n```\n:::\n\n\nInspect.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_values[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"11\" \"27\" \"63\"\n```\n:::\n:::\n\n\nThese can be converted to numeric.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_vector <- as.numeric(dat_values)\n```\n:::\n\n\nCheck.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_vector[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11 27 63\n```\n:::\n:::\n\n\nFinally, add all values in the vector with calibration values.\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(dat_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55172\n```\n:::\n:::\n\n\n## Part 2\n\nAdd vector with viable textual values.\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_values <- c(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\nnum_values <- as.character(1:9)\n```\n:::\n\n\nBefore removing the letters, convert textual values to numbers.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_input <- input\ndat_replaced <- purrr::map2(text_values, num_values, ~{\n\tdat_input <<- str_replace_all(dat_input, .x, .y)\n})[[9]]\n```\n:::\n\n\nCheck if there are still values as text.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_replaced[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"qzjggk11\"    \"2277\"        \"vsz32633423\"\n```\n:::\n:::\n\n\nRepeat above steps.\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_numbers <- str_remove_all(dat_replaced, regex(\"[:alpha:]\"))\ndat_first <- str_extract_all(dat_numbers, regex(\"^[:digit:]\"), simplify = TRUE)\ndat_last <- str_extract_all(dat_numbers, regex(\"[:digit:]$\"), simplify = TRUE)\ndat_values <- str_c(dat_first, dat_last)\n```\n:::\n\n\nCompute total.\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(as.numeric(dat_values))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54393\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}